import java.util.*;

public class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0;

        // Mapping of bus stop to buses that pass through it
        Map<Integer, List<Integer>> stopToBuses = new HashMap<>();
        for (int i = 0; i < routes.length; i++) {
            for (int stop : routes[i]) {
                stopToBuses.putIfAbsent(stop, new ArrayList<>());
                stopToBuses.get(stop).add(i);
            }
        }

        Queue<int[]> queue = new LinkedList<>();  // Array of [currentStop, busCount]
        Set<Integer> visitedStops = new HashSet<>(); // Visited stops
        Set<Integer> visitedBuses = new HashSet<>(); // Visited buses

        // Initialize the queue with the source stop
        queue.add(new int[]{source, 0});
        visitedStops.add(source);

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int currentStop = current[0];
            int busCount = current[1];

            // Try all buses that can be taken from this stop
            for (int bus : stopToBuses.getOrDefault(currentStop, Collections.emptyList())) {
                if (!visitedBuses.contains(bus)) {
                    visitedBuses.add(bus);
                    for (int stop : routes[bus]) {
                        if (stop == target) {
                            return busCount + 1;
                        }
                        if (visitedStops.add(stop)) {
                            queue.add(new int[]{stop, busCount + 1});
                        }
                    }
                }
            }
        }
        
        return -1;  // If no route found
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] routes1 = {{1, 2, 7}, {3, 6, 7}};
        int source1 = 1, target1 = 6;
        System.out.println(solution.numBusesToDestination(routes1, source1, target1)); // Output: 2
        
        int[][] routes2 = {{7, 12}, {4, 5, 15}, {6}, {15, 19}, {9, 12, 13}};
        int source2 = 15, target2 = 12;
        System.out.println(solution.numBusesToDestination(routes2, source2, target2)); // Output: -1
    }
}
